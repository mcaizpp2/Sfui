import { AfterContentInit, ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { Sidebar } from './sidebar.component';
import * as ɵngcc0 from '@angular/core';
export declare class SidebarContainer implements AfterContentInit, OnChanges, OnDestroy {
    private _ref;
    animate: boolean;
    allowSidebarBackdropControl: boolean;
    showBackdrop: boolean;
    showBackdropChange: EventEmitter<boolean>;
    onBackdropClicked: EventEmitter<null>;
    contentClass: string;
    backdropClass: string;
    private _sidebars;
    private _isBrowser;
    constructor(_ref: ChangeDetectorRef, platformId: Object);
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * @internal
     *
     * Adds a sidebar to the container's list of sidebars.
     *
     * @param sidebar {Sidebar} A sidebar within the container to register.
     */
    _addSidebar(sidebar: Sidebar): void;
    /**
     * @internal
     *
     * Removes a sidebar from the container's list of sidebars.
     *
     * @param sidebar {Sidebar} The sidebar to remove.
     */
    _removeSidebar(sidebar: Sidebar): void;
    /**
     * @internal
     *
     * Computes `margin` value to push page contents to accommodate open sidebars as needed.
     *
     * @return {CSSStyleDeclaration} margin styles for the page content.
     */
    _getContentStyle(): CSSStyleDeclaration;
    /**
     * @internal
     *
     * Closes sidebars when the backdrop is clicked, if they have the
     * `closeOnClickBackdrop` option set.
     */
    _onBackdropClicked(): void;
    /**
     * Subscribes from a sidebar events to react properly.
     */
    private _subscribe;
    /**
     * Unsubscribes from all sidebars.
     */
    private _unsubscribe;
    /**
     * Check if we should show the backdrop when a sidebar is toggled.
     */
    private _onToggle;
    /**
     * Triggers change detection to recompute styles.
     */
    private _markForCheck;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SidebarContainer, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SidebarContainer, "ng-sidebar-container", never, { "animate": "animate"; "allowSidebarBackdropControl": "allowSidebarBackdropControl"; "showBackdrop": "showBackdrop"; "contentClass": "contentClass"; "backdropClass": "backdropClass"; }, { "showBackdropChange": "showBackdropChange"; "onBackdropClicked": "onBackdropClicked"; }, never, ["ng-sidebar,[ng-sidebar]", "[ng-sidebar-content]"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZWJhci1jb250YWluZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInNpZGViYXItY29udGFpbmVyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2lkZWJhciB9IGZyb20gJy4vc2lkZWJhci5jb21wb25lbnQnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU2lkZWJhckNvbnRhaW5lciBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF9yZWY7XG4gICAgYW5pbWF0ZTogYm9vbGVhbjtcbiAgICBhbGxvd1NpZGViYXJCYWNrZHJvcENvbnRyb2w6IGJvb2xlYW47XG4gICAgc2hvd0JhY2tkcm9wOiBib29sZWFuO1xuICAgIHNob3dCYWNrZHJvcENoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICAgIG9uQmFja2Ryb3BDbGlja2VkOiBFdmVudEVtaXR0ZXI8bnVsbD47XG4gICAgY29udGVudENsYXNzOiBzdHJpbmc7XG4gICAgYmFja2Ryb3BDbGFzczogc3RyaW5nO1xuICAgIHByaXZhdGUgX3NpZGViYXJzO1xuICAgIHByaXZhdGUgX2lzQnJvd3NlcjtcbiAgICBjb25zdHJ1Y3RvcihfcmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgcGxhdGZvcm1JZDogT2JqZWN0KTtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqXG4gICAgICogQWRkcyBhIHNpZGViYXIgdG8gdGhlIGNvbnRhaW5lcidzIGxpc3Qgb2Ygc2lkZWJhcnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2lkZWJhciB7U2lkZWJhcn0gQSBzaWRlYmFyIHdpdGhpbiB0aGUgY29udGFpbmVyIHRvIHJlZ2lzdGVyLlxuICAgICAqL1xuICAgIF9hZGRTaWRlYmFyKHNpZGViYXI6IFNpZGViYXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqXG4gICAgICogUmVtb3ZlcyBhIHNpZGViYXIgZnJvbSB0aGUgY29udGFpbmVyJ3MgbGlzdCBvZiBzaWRlYmFycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzaWRlYmFyIHtTaWRlYmFyfSBUaGUgc2lkZWJhciB0byByZW1vdmUuXG4gICAgICovXG4gICAgX3JlbW92ZVNpZGViYXIoc2lkZWJhcjogU2lkZWJhcik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICpcbiAgICAgKiBDb21wdXRlcyBgbWFyZ2luYCB2YWx1ZSB0byBwdXNoIHBhZ2UgY29udGVudHMgdG8gYWNjb21tb2RhdGUgb3BlbiBzaWRlYmFycyBhcyBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBtYXJnaW4gc3R5bGVzIGZvciB0aGUgcGFnZSBjb250ZW50LlxuICAgICAqL1xuICAgIF9nZXRDb250ZW50U3R5bGUoKTogQ1NTU3R5bGVEZWNsYXJhdGlvbjtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKlxuICAgICAqIENsb3NlcyBzaWRlYmFycyB3aGVuIHRoZSBiYWNrZHJvcCBpcyBjbGlja2VkLCBpZiB0aGV5IGhhdmUgdGhlXG4gICAgICogYGNsb3NlT25DbGlja0JhY2tkcm9wYCBvcHRpb24gc2V0LlxuICAgICAqL1xuICAgIF9vbkJhY2tkcm9wQ2xpY2tlZCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgZnJvbSBhIHNpZGViYXIgZXZlbnRzIHRvIHJlYWN0IHByb3Blcmx5LlxuICAgICAqL1xuICAgIHByaXZhdGUgX3N1YnNjcmliZTtcbiAgICAvKipcbiAgICAgKiBVbnN1YnNjcmliZXMgZnJvbSBhbGwgc2lkZWJhcnMuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfdW5zdWJzY3JpYmU7XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgd2Ugc2hvdWxkIHNob3cgdGhlIGJhY2tkcm9wIHdoZW4gYSBzaWRlYmFyIGlzIHRvZ2dsZWQuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfb25Ub2dnbGU7XG4gICAgLyoqXG4gICAgICogVHJpZ2dlcnMgY2hhbmdlIGRldGVjdGlvbiB0byByZWNvbXB1dGUgc3R5bGVzLlxuICAgICAqL1xuICAgIHByaXZhdGUgX21hcmtGb3JDaGVjaztcbn1cbiJdfQ==