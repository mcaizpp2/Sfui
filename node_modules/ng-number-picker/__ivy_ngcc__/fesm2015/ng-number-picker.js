import { Injectable, Component, Input, Output, EventEmitter, NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/forms';

function NumberPickerComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "span", 4);
    ɵngcc0.ɵɵlistener("click", function NumberPickerComponent_div_1_Template_span_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onDecrease($event); })("mouseup", function NumberPickerComponent_div_1_Template_span_mouseup_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onMouseUp($event, false); })("mousedown", function NumberPickerComponent_div_1_Template_span_mousedown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.onMouseDown($event, false); });
    ɵngcc0.ɵɵtext(2, "-");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMapInterpolate1("input-group-text decrease ", ctx_r0.customClass.down, "");
} }
function NumberPickerComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMapInterpolate1("input-group-text ", ctx_r1.customClass.prefix, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.prefix);
} }
function NumberPickerComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMapInterpolate1("input-group-text ", ctx_r2.customClass.postfix, "");
    ɵngcc0.ɵɵstyleProp("border-left", "0");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.postfix);
} }
function NumberPickerComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "span", 4);
    ɵngcc0.ɵɵlistener("click", function NumberPickerComponent_div_5_Template_span_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.onIncrease($event); })("mouseup", function NumberPickerComponent_div_5_Template_span_mouseup_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onMouseUp($event); })("mousedown", function NumberPickerComponent_div_5_Template_span_mousedown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onMouseDown($event); });
    ɵngcc0.ɵɵtext(2, "+");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMapInterpolate1("input-group-text increase ", ctx_r3.customClass.up, "");
    ɵngcc0.ɵɵstyleProp("border-left", !ctx_r3.postfix ? "0" : "");
} }
function NumberPickerComponent_div_6_span_2_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 4);
    ɵngcc0.ɵɵlistener("click", function NumberPickerComponent_div_6_span_2_Template_span_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15.onIncrease($event); })("mouseup", function NumberPickerComponent_div_6_span_2_Template_span_mouseup_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r17 = ɵngcc0.ɵɵnextContext(2); return ctx_r17.onMouseUp($event); })("mousedown", function NumberPickerComponent_div_6_span_2_Template_span_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.onMouseDown($event); });
    ɵngcc0.ɵɵtext(1, "+");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassMap(ctx_r13.customClass.up);
} }
function NumberPickerComponent_div_6_span_3_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 4);
    ɵngcc0.ɵɵlistener("click", function NumberPickerComponent_div_6_span_3_Template_span_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r19 = ɵngcc0.ɵɵnextContext(2); return ctx_r19.onDecrease($event); })("mouseup", function NumberPickerComponent_div_6_span_3_Template_span_mouseup_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.onMouseUp($event, false); })("mousedown", function NumberPickerComponent_div_6_span_3_Template_span_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r22 = ɵngcc0.ɵɵnextContext(2); return ctx_r22.onMouseDown($event, false); });
    ɵngcc0.ɵɵtext(1, "-");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassMap(ctx_r14.customClass.down);
} }
function NumberPickerComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "span", 6);
    ɵngcc0.ɵɵtemplate(2, NumberPickerComponent_div_6_span_2_Template, 2, 3, "span", 7);
    ɵngcc0.ɵɵtemplate(3, NumberPickerComponent_div_6_span_3_Template, 2, 3, "span", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.showUpButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.showDownButton);
} }
class NumberPickerService {
    constructor() {
        /**
         * Min picker value
         */
        this.min = 0;
        /**
         * Max picker value
         */
        this.max = 100;
        /**
         * Pick step value
         */
        this.step = 1;
        /**
         * Delay for start picking values
         */
        this.pickStartAfter = 500;
        /**
         * Delay betweens each pick
         */
        this.pickTimer = 100;
        /**
         * value precision
         */
        this.precision = 1;
        /**
         * Inital picker value
         */
        this.value = null;
    }
}
NumberPickerService.ɵfac = function NumberPickerService_Factory(t) { return new (t || NumberPickerService)(); };
NumberPickerService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NumberPickerService, factory: NumberPickerService.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NumberPickerService, [{
        type: Injectable
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberPickerComponent {
    /**
     * @param {?} numberPickerService
     */
    constructor(numberPickerService) {
        this.numberPickerService = numberPickerService;
        this.eventHolder = null;
        this.countInterval = null;
        this.isInputFocused = false;
        this.size = 'md';
        this.customClass = {};
        this.mouseWheel = false;
        this.arrowKeys = true;
        this.inputReadOnly = false;
        this.showUpButton = true;
        this.showDownButton = true;
        this.valueChange = new EventEmitter();
        this.minReached = new EventEmitter();
        this.maxReached = new EventEmitter();
        this.pickStarted = new EventEmitter();
        this.pickStoped = new EventEmitter();
        this.pickUpStarted = new EventEmitter();
        this.pickUpStoped = new EventEmitter();
        this.pickDownStarted = new EventEmitter();
        this.pickDownStoped = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initPicker();
    }
    /**
     * @return {?}
     */
    isHorizontal() {
        return (this.buttonsOrientation !== 'v' && this.buttonsOrientation !== 'vertical');
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onFocus(event) {
        event.preventDefault();
        event.stopPropagation();
        this.isInputFocused = true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onBlur(event) {
        event.preventDefault();
        event.stopPropagation();
        this.isInputFocused = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseWheel(event) {
        if (this.isInputFocused) {
            event.preventDefault();
            /** @type {?} */
            let wheelUp = null;
            /** @type {?} */
            let delta = null;
            if (event.deltaY) {
                delta = event.deltaY / 60;
            }
            if (event.detail) {
                delta = -event.detail / 2;
            }
            if (delta !== null) {
                wheelUp = delta > 0;
            }
            this.afterMouseWheels(wheelUp, event);
            event.stopPropagation();
        }
    }
    /**
     * @private
     * @param {?} wheelUp
     * @param {?} event
     * @return {?}
     */
    afterMouseWheels(wheelUp, event) {
        this.onPickStarted(wheelUp);
        if (wheelUp) {
            this.onIncrease(event);
        }
        else {
            this.onDecrease(event);
        }
        this.onPickStoped(wheelUp);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onValueChange(event) {
        if (this.value > this.max) {
            this.value = this.max;
        }
        else if (this.value < this.min) {
            this.value = this.min;
        }
        if (this.parseVal(this.value)) {
            this.valueChange.emit(this.value);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDecrease(event) {
        event.preventDefault();
        if (this.canDecrease()) {
            this.value = this.round((this.value > this.min) ? this.value -= this.step : this.value);
            this.valueChange.emit(this.value);
        }
        else {
            this.minReached.emit(true);
        }
        event.stopPropagation();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onIncrease(event) {
        event.preventDefault();
        if (this.canIncrease()) {
            this.value = this.round((this.value < this.max) ? this.value += this.step : this.value);
            this.valueChange.emit(this.value);
        }
        else {
            this.maxReached.emit(true);
        }
        event.stopPropagation();
    }
    /**
     * @param {?} event
     * @param {?=} increase
     * @return {?}
     */
    onMouseDown(event, increase = true) {
        this.afterMouseDown(increase, event);
    }
    /**
     * @private
     * @param {?} keyCode
     * @return {?}
     */
    isArrowUpDown(keyCode) {
        return keyCode === 38 || keyCode === 40;
    }
    /**
     * @private
     * @param {?} keyCode
     * @return {?}
     */
    isArowUp(keyCode) {
        return keyCode === 38;
    }
    /**
     * @private
     * @param {?} increase
     * @param {?} event
     * @return {?}
     */
    loopPick(increase, event) {
        this.onPickStarted(increase);
        this.eventHolder = setTimeout((/**
         * @return {?}
         */
        () => {
            this.countInterval = setInterval((/**
             * @return {?}
             */
            () => {
                if (increase) {
                    this.onIncrease(event);
                }
                else {
                    this.onDecrease(event);
                }
            }), this.pickTimer);
        }), this.pickStartAfter);
    }
    /**
     * @param {?} event
     * @param {?=} increase
     * @return {?}
     */
    onMouseUp(event, increase = true) {
        this.afterMouseUp(increase, event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        if (this.isArrowUpDown(event.keyCode)) {
            event.preventDefault();
            if (!this.eventHolder) {
                this.loopPick(this.isArowUp(event.keyCode), event);
            }
        }
        event.stopPropagation();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyUp(event) {
        if (this.isArrowUpDown(event.keyCode)) {
            event.preventDefault();
            this.afterPick(this.isArowUp(event.keyCode));
        }
        event.stopPropagation();
    }
    /**
     * @private
     * @param {?} up
     * @param {?} event
     * @return {?}
     */
    afterMouseDown(up, event) {
        event.preventDefault();
        if (this.isLeftClick(event.which)) {
            this.loopPick(up, event);
        }
        event.stopPropagation();
    }
    /**
     * @private
     * @param {?} up
     * @param {?} event
     * @return {?}
     */
    afterMouseUp(up, event) {
        event.preventDefault();
        this.afterPick(up);
        event.stopPropagation();
    }
    /**
     * @private
     * @param {?} up
     * @return {?}
     */
    afterPick(up) {
        this.onPickStoped(up);
        this.clearTimers();
    }
    /**
     * @private
     * @return {?}
     */
    clearTimers() {
        clearTimeout(this.eventHolder);
        clearInterval(this.countInterval);
        this.eventHolder = null;
        this.countInterval = null;
    }
    /**
     * @private
     * @param {?} up
     * @param {?} event
     * @param {?} start
     * @return {?}
     */
    afterArrowKeysPressed(up, event, start) {
        if (start) {
            this.loopPick(up, event);
        }
        else {
            this.afterPick(up);
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    parseVal(value) {
        if (typeof value === 'number') {
            return value;
        }
        return parseFloat(value);
    }
    /**
     * @private
     * @param {?} step
     * @return {?}
     */
    getPrecision(step) {
        return /\d*$/.exec(String(step))[0].length;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    round(value) {
        return Math.round(value * Math.pow(10, this.precision)) / Math.pow(10, this.precision);
    }
    /**
     * @private
     * @return {?}
     */
    canIncrease() {
        /** @type {?} */
        const canIncrease = (this.value <= this.max - this.step);
        if (!canIncrease) {
            this.value = this.max;
        }
        return canIncrease;
    }
    /**
     * @private
     * @return {?}
     */
    canDecrease() {
        /** @type {?} */
        const canDecrease = (this.value >= this.min + this.step);
        if (!canDecrease) {
            this.value = this.min;
        }
        return canDecrease;
    }
    /**
     * @private
     * @param {?} increase
     * @return {?}
     */
    onPickStarted(increase) {
        if (increase) {
            if (this.canIncrease()) {
                this.pickStarted.emit(true);
                this.pickUpStarted.emit(true);
            }
        }
        else {
            if (this.canDecrease()) {
                this.pickStarted.emit(true);
                this.pickDownStarted.emit(true);
            }
        }
    }
    /**
     * @private
     * @param {?} increase
     * @return {?}
     */
    onPickStoped(increase) {
        if (increase) {
            if (this.canIncrease()) {
                this.pickUpStoped.emit(true);
                this.pickStoped.emit(true);
            }
        }
        else {
            if (this.canDecrease()) {
                this.pickDownStoped.emit(true);
                this.pickStoped.emit(true);
            }
        }
    }
    /**
     * @private
     * @param {?} witch
     * @return {?}
     */
    isLeftClick(witch) {
        return witch === 1;
    }
    /**
     * @private
     * @return {?}
     */
    initPicker() {
        this.min = this.parseVal(this.min) || this.numberPickerService.min;
        this.max = this.parseVal(this.max) || this.numberPickerService.max;
        this.step = this.parseVal(this.step) || this.numberPickerService.step;
        this.value = this.parseVal(this.value) || this.numberPickerService.value;
        this.pickStartAfter = this.parseVal(this.pickStartAfter) || this.numberPickerService.pickStartAfter;
        this.pickTimer = this.parseVal(this.pickTimer) || this.numberPickerService.pickTimer;
        this.precision = this.getPrecision(this.step) || this.numberPickerService.precision;
        this.value = this.round(this.value);
        this.placeholder = this.placeholder !== undefined ? this.placeholder : '';
    }
}
NumberPickerComponent.ɵfac = function NumberPickerComponent_Factory(t) { return new (t || NumberPickerComponent)(ɵngcc0.ɵɵdirectiveInject(NumberPickerService)); };
NumberPickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NumberPickerComponent, selectors: [["ng-number-picker"]], inputs: { size: "size", customClass: "customClass", mouseWheel: "mouseWheel", arrowKeys: "arrowKeys", inputReadOnly: "inputReadOnly", showUpButton: "showUpButton", showDownButton: "showDownButton", value: "value", min: "min", max: "max", step: "step", pickStartAfter: "pickStartAfter", pickTimer: "pickTimer", placeholder: "placeholder", prefix: "prefix", postfix: "postfix", buttonsOrientation: "buttonsOrientation" }, outputs: { valueChange: "valueChange", minReached: "minReached", maxReached: "maxReached", pickStarted: "pickStarted", pickStoped: "pickStoped", pickUpStarted: "pickUpStarted", pickUpStoped: "pickUpStoped", pickDownStarted: "pickDownStarted", pickDownStoped: "pickDownStoped" }, decls: 7, vars: 12, consts: [["class", "input-group-prepend", 4, "ngIf"], ["type", "number", "name", "input-spin-val", 1, "form-control", 3, "ngModel", "readOnly", "placeholder", "ngModelChange", "blur", "focus", "mousewheel", "keyup", "keydown", "keydown.arrowup", "keydown.arrowdown", "change"], ["class", "input-group-append", 4, "ngIf"], [1, "input-group-prepend"], [3, "click", "mouseup", "mousedown"], [1, "input-group-append"], [1, "input-group-text", "vertical", "p-0"], [3, "class", "click", "mouseup", "mousedown", 4, "ngIf"]], template: function NumberPickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵtemplate(1, NumberPickerComponent_div_1_Template, 3, 3, "div", 0);
        ɵngcc0.ɵɵtemplate(2, NumberPickerComponent_div_2_Template, 3, 4, "div", 0);
        ɵngcc0.ɵɵelementStart(3, "input", 1);
        ɵngcc0.ɵɵlistener("ngModelChange", function NumberPickerComponent_Template_input_ngModelChange_3_listener($event) { return ctx.value = $event; })("blur", function NumberPickerComponent_Template_input_blur_3_listener($event) { return ctx.onBlur($event); })("focus", function NumberPickerComponent_Template_input_focus_3_listener($event) { return ctx.onFocus($event); })("mousewheel", function NumberPickerComponent_Template_input_mousewheel_3_listener($event) { return ctx.mouseWheel && ctx.onMouseWheel($event); })("keyup", function NumberPickerComponent_Template_input_keyup_3_listener($event) { return ctx.arrowKeys && ctx.onKeyUp($event); })("keydown", function NumberPickerComponent_Template_input_keydown_3_listener($event) { return ctx.arrowKeys && ctx.onKeyDown($event); })("keydown.arrowup", function NumberPickerComponent_Template_input_keydown_arrowup_3_listener($event) { return ctx.arrowKeys && ctx.onIncrease($event); })("keydown.arrowdown", function NumberPickerComponent_Template_input_keydown_arrowdown_3_listener($event) { return ctx.arrowKeys && ctx.onDecrease($event); })("change", function NumberPickerComponent_Template_input_change_3_listener($event) { return ctx.onValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, NumberPickerComponent_div_4_Template, 3, 6, "div", 0);
        ɵngcc0.ɵɵtemplate(5, NumberPickerComponent_div_5_Template, 3, 5, "div", 0);
        ɵngcc0.ɵɵtemplate(6, NumberPickerComponent_div_6_Template, 4, 2, "div", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate2("input-group mb-3 input-", ctx.size, " ", ctx.customClass.container, "");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isHorizontal() && ctx.showDownButton);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.prefix);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngModel", ctx.value)("readOnly", ctx.inputReadOnly)("placeholder", ctx.placeholder);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.postfix);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isHorizontal() && ctx.showUpButton);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isHorizontal());
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.NumberValueAccessor, ɵngcc2.DefaultValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel], styles: ["input[type=number][_ngcontent-%COMP%]::-webkit-inner-spin-button, input[type=number][_ngcontent-%COMP%]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.decrease[_ngcontent-%COMP%]:hover, .increase[_ngcontent-%COMP%]:hover{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;background-color:#d8d8d8}.increase[_ngcontent-%COMP%]{border-top-right-radius:3px!important;border-bottom-right-radius:3px!important}.vertical[_ngcontent-%COMP%]{display:flex;justify-content:center;flex-direction:column;text-align:center;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer}.vertical[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{line-height:15px}.input-md[_ngcontent-%COMP%]   .vertical[_ngcontent-%COMP%]   span[_ngcontent-%COMP%], .input-sm[_ngcontent-%COMP%]   .vertical[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{padding:2px 10px}.input-lg[_ngcontent-%COMP%]   .vertical[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{padding:4px 10px}.input-xlg[_ngcontent-%COMP%]   .vertical[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{padding:7px 10px}.input-md[_ngcontent-%COMP%], .input-medium[_ngcontent-%COMP%]{height:45px}.input-large[_ngcontent-%COMP%], .input-lg[_ngcontent-%COMP%]{height:50px}.input-xlarge[_ngcontent-%COMP%], .input-xlg[_ngcontent-%COMP%]{height:75px}.input-md[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .input-md[_ngcontent-%COMP%]   span[_ngcontent-%COMP%], .input-medium[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .input-medium[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{font-size:22px}.input-large[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .input-large[_ngcontent-%COMP%]   span[_ngcontent-%COMP%], .input-lg[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .input-lg[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{font-size:25px}.input-xlarge[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .input-xlarge[_ngcontent-%COMP%]   span[_ngcontent-%COMP%], .input-xlg[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .input-xlg[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{font-size:38px}"] });
/** @nocollapse */
NumberPickerComponent.ctorParameters = () => [
    { type: NumberPickerService }
];
NumberPickerComponent.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    step: [{ type: Input }],
    value: [{ type: Input }],
    pickStartAfter: [{ type: Input }],
    pickTimer: [{ type: Input }],
    prefix: [{ type: Input }],
    postfix: [{ type: Input }],
    placeholder: [{ type: Input }],
    buttonsOrientation: [{ type: Input }],
    size: [{ type: Input }],
    customClass: [{ type: Input }],
    mouseWheel: [{ type: Input }],
    arrowKeys: [{ type: Input }],
    inputReadOnly: [{ type: Input }],
    showUpButton: [{ type: Input }],
    showDownButton: [{ type: Input }],
    valueChange: [{ type: Output }],
    minReached: [{ type: Output }],
    maxReached: [{ type: Output }],
    pickStarted: [{ type: Output }],
    pickStoped: [{ type: Output }],
    pickUpStarted: [{ type: Output }],
    pickUpStoped: [{ type: Output }],
    pickDownStarted: [{ type: Output }],
    pickDownStoped: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NumberPickerComponent, [{
        type: Component,
        args: [{
                selector: 'ng-number-picker',
                template: `
  <div class="input-group mb-3 input-{{size}} {{customClass.container}}">
  <!-- Horizontal decrease button orientation -->
  <div class="input-group-prepend" *ngIf="isHorizontal() && showDownButton">
    <span class="input-group-text decrease {{customClass.down}}" (click)="onDecrease($event)"
    (mouseup)="onMouseUp($event, false)" (mousedown)="onMouseDown($event, false)">-</span>
  </div>
  <!-- Input prefix -->
  <div *ngIf="prefix" class="input-group-prepend">
    <span class="input-group-text {{customClass.prefix}}">{{prefix}}</span>
  </div>
  <input type="number" class="form-control" name="input-spin-val"
  [(ngModel)]="value"
  [readOnly]="inputReadOnly"
  (blur)="onBlur($event)"
  (focus)="onFocus($event)"
  (mousewheel)="mouseWheel && onMouseWheel($event)"
  (keyup)="arrowKeys && onKeyUp($event)"
  (keydown)="arrowKeys && onKeyDown($event)"
  (keydown.arrowup)="arrowKeys && onIncrease($event)"
  (keydown.arrowdown)="arrowKeys && onDecrease($event)"
  (change)="onValueChange($event)"
  [placeholder]="placeholder"
  >
  <!-- Input postfix -->
  <div *ngIf="postfix" class="input-group-prepend">
    <span class="input-group-text {{customClass.postfix}}" [style.borderLeft]="'0'">{{postfix}}</span>
  </div>
  <!-- Horizontal increase button orientation -->
  <div class="input-group-prepend" *ngIf="isHorizontal() && showUpButton">
    <span class="input-group-text increase {{customClass.up}}" [style.borderLeft]="(!postfix) ? '0' : ''" (click)="onIncrease($event)"
    (mouseup)="onMouseUp($event)" (mousedown)="onMouseDown($event)">+</span>
  </div>
  <!-- Vertical buttons orientation -->
  <div class="input-group-append" *ngIf="!isHorizontal()">
    <span class="input-group-text vertical p-0">
      <span *ngIf="showUpButton" class="{{customClass.up}}" (click)="onIncrease($event)" (mouseup)="onMouseUp($event)"
      (mousedown)="onMouseDown($event)">+</span>
      <span *ngIf="showDownButton" class="{{customClass.down}}" (click)="onDecrease($event)" (mouseup)="onMouseUp($event, false)"
      (mousedown)="onMouseDown($event, false)">-</span>
    </span>
  </div>
</div>
  `,
                styles: ["input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.decrease:hover,.increase:hover{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;background-color:#d8d8d8}.increase{border-top-right-radius:3px!important;border-bottom-right-radius:3px!important}.vertical{display:flex;justify-content:center;flex-direction:column;text-align:center;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer}.vertical span{line-height:15px}.input-md .vertical span,.input-sm .vertical span{padding:2px 10px}.input-lg .vertical span{padding:4px 10px}.input-xlg .vertical span{padding:7px 10px}.input-md,.input-medium{height:45px}.input-large,.input-lg{height:50px}.input-xlarge,.input-xlg{height:75px}.input-md input,.input-md span,.input-medium input,.input-medium span{font-size:22px}.input-large input,.input-large span,.input-lg input,.input-lg span{font-size:25px}.input-xlarge input,.input-xlarge span,.input-xlg input,.input-xlg span{font-size:38px}"]
            }]
    }], function () { return [{ type: NumberPickerService }]; }, { size: [{
            type: Input
        }], customClass: [{
            type: Input
        }], mouseWheel: [{
            type: Input
        }], arrowKeys: [{
            type: Input
        }], inputReadOnly: [{
            type: Input
        }], showUpButton: [{
            type: Input
        }], showDownButton: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], minReached: [{
            type: Output
        }], maxReached: [{
            type: Output
        }], pickStarted: [{
            type: Output
        }], pickStoped: [{
            type: Output
        }], pickUpStarted: [{
            type: Output
        }], pickUpStoped: [{
            type: Output
        }], pickDownStarted: [{
            type: Output
        }], pickDownStoped: [{
            type: Output
        }], value: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], step: [{
            type: Input
        }], pickStartAfter: [{
            type: Input
        }], pickTimer: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], prefix: [{
            type: Input
        }], postfix: [{
            type: Input
        }], buttonsOrientation: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberPickerModule {
}
NumberPickerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NumberPickerModule });
NumberPickerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NumberPickerModule_Factory(t) { return new (t || NumberPickerModule)(); }, providers: [NumberPickerService], imports: [[
            CommonModule,
            FormsModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NumberPickerModule, { declarations: function () { return [NumberPickerComponent]; }, imports: function () { return [CommonModule,
        FormsModule]; }, exports: function () { return [NumberPickerComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NumberPickerModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule
                ],
                providers: [NumberPickerService],
                declarations: [NumberPickerComponent],
                exports: [NumberPickerComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NumberPickerService, NumberPickerComponent, NumberPickerModule };

//# sourceMappingURL=ng-number-picker.js.map